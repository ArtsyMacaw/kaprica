#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <xxhash.h>
#include <inttypes.h>
#include "clipboard.h"
#include "xmalloc.h"

#ifndef HASH_H
#define HASH_H

enum
{
    UINT64_STRING_SIZE = 21
};

struct alphabetical_list
{
    uint8_t position;
    char *mime_type;
};

static int alphabetical_sort(const void *a, const void *b)
{
    struct alphabetical_list *first = (struct alphabetical_list *)a;
    struct alphabetical_list *second = (struct alphabetical_list *)b;
    return strcmp(first->mime_type, second->mime_type);
}

/* Generate a hash of the data that is later used to check for duplicate
 * data in the sqlite database. The hash is generated by XXH3_64bits */
char *generate_hash(source_buffer *src)
{
    struct alphabetical_list *sorted =
        xmalloc(sizeof(struct alphabetical_list) * src->num_types);
    for (int i = 0; i < src->num_types; i++)
    {
        sorted[i].position = i;
        sorted[i].mime_type = src->types[i];
    }

    /* Alphabetically sort the list of mime types as they are not
     * guaranteed to be in any particular order even with the same data */
    qsort(sorted, src->num_types, sizeof(struct alphabetical_list),
          alphabetical_sort);

    XXH3_state_t *state = XXH3_createState();
    if (!state)
    {
        perror("Failed to create hash state");
        exit(EXIT_FAILURE);
    }

    if (XXH3_64bits_reset(state) == XXH_ERROR)
    {
        perror("Failed to reset hash state");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < src->num_types; i++)
    {
        unsigned char *data = (unsigned char *)src->data[sorted[i].position];
        size_t len = src->len[sorted[i].position];
        if (XXH3_64bits_update(state, data, len) == XXH_ERROR)
        {
            perror("Failed to update hash state");
            exit(EXIT_FAILURE);
        }
    }
    free(sorted);

    uint64_t data_hash = XXH3_64bits_digest(state);
    char *hash_string = xmalloc(UINT64_STRING_SIZE);
    snprintf(hash_string, UINT64_STRING_SIZE, "%" PRIu64, data_hash);
    XXH3_freeState(state);

    return hash_string;
}

#endif
